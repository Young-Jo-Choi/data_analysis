B<-data.frame(y = c(80,75,100,90,80))
bind_cols(A,B)
cbind(A,B)
rm(list = ls())
library('reshape')
rm(list = ls())
library('reshape2')
install.packages('reshape2')
library(reshape2)
data("airquality")
df <- as.data.frame(airquality)
df
head(df)
melt(df, id.ars = c("Month","Day"), na.rm = T)
melted.df <- melt(df, id.ars = c("Month","Day"), na.rm = T)
melted.df <- melt(df, id.vars = c("Month","Day"), na.rm = T)
library(dplyr)
melted.df %>% filter(Month==5)
melted.df %>% filter(Month==5 & Day ==1)
dcast(melted.df, Month+Day~...)
dcast(melted.df, Month+Day~..., fun.aggregate = mean)
dcast(melted.df, Month+Day~..., fun.aggregate = mean)
head(dcast(melted.df, Month+Day~..., fun.aggregate = mean))
df%>% filter(Month ==5 & Day == 1)
View(melted.df)
head(dcast(melt.df, Month~..., fun.aggregate = mean))
head(dcast(melted.df, Month~..., fun.aggregate = mean))
head(melted.df)
library(data.table)
mydata <- data.table(x=c(1:3),y = c('가','나','다'))
mydata
class(mydata)
class(iris)
class(iris_dt)
iris_dt <- as.data.table(iris)
class(iris_dt)
iris_dt
tables()
iris_dt[1,]
iris_dt[c(1,3:5)]
iris_dt[c(1,3:5),]
iris_dt[c(1:4),
]
iris_dt[c(1,3:5),]
iris_dt[c(1:5),
]
iris_dt[iris_dt$Species == 'setosa',]
iris_dt[,list(Sepal.Width, Petal.Width)]
iris_dt[,mean(Sepal.Length)]
iris_dt[,list(mean(Sepal.Length),mean(Petal.Width))]
iris_dt[,list(mean.SL = mean(Sepal.Length),mean(Petal.Width))]
iris_dt[,list(mean.SL := mean(Sepal.Length),mean.PW :=mean(Petal.Width))]
iris_dt[,list(mean.SL = mean(Sepal.Length),mean(Petal.Width))]
air <- as.data.table(airquality)
str(air)
head(air)
air[,Wind_class:=ifelse(Wind>=mean(Wind),"U","D")]
air
air[order(Solor.R)]
air[order(Solar.R)]
na.omit(air[order(Solar.R)])
head(air)
air[, season := ifelse(Month %in% c(12,1), "Winter",
ifelse(Month %in% C(3:5), "Spring",
ifelse(Month %in% c(6:8), "Summer","Fall")))]
air[, season := ifelse(Month %in% c(12,1), "Winter",
ifelse(Month %in% c(3:5), "Spring",
ifelse(Month %in% c(6:8), "Summer","Fall")))]
head(air)
air %>% select(Season)
air %>% select(season)
air %>% select(,(season))
air %>% select(list(season))
air %>% dplyr::select(list(season))
air %>% dplyr::select(season)
table(air %>% dplyr::select(season))
air[,c("Month","season")]
table(air[,c("Month","season")])
table(air[,"Month"])
head(air)
air[,.(Ozone.mean=mean(Ozone, na.rm = T), Solar.R.mean=mean(Solar.R, na.rm=T)), by=.(season)][
order(Ozone.mean, decreasing = T)
]
baseball < as.data.table(baseball)
data(baseball)
library(plyr)
data(baseball)
baseball < as.data.table(baseball)
baseball <- as.data.table(baseball)
setkey(baseball, year)
str(baseball)
baseball[J(1960)]
baseball[J(1960), list(gmean=mean(g)),by=team]
table(baseball$team)
unique(baseball$team)
DT1 = data.table(x1=c('a','b','c'),x2=c('A','B','C'))
DT2 = data.table(x1=c('a','b','d'),x2=c(1,2,3))
merge(DT1,DT2,all.x = F)
merge(DT1,DT2,all.x = T)
DT2 = data.table(x1=c('a','b','d'),x3=c(1,2,3))
merge(DT1,DT2,all.x = T)
merge(DT1,DT2,all.x = F)
merge(DT1,DT2,all.x = T)
merge(DT1,DT2,all.y = T)
DT2[DT1]
setket(DT1, x1)
setkey(DT1, x1)
setkey(DT2, x1)
DT1[DT2]
DT2[DT1]
DT1[DT2, nonmatch=0]
DT1[DT2, nomatch=0]
DT1[DT2, nomatch=1]
DT1[DT2, nomatch=0]
data("airquality")
air-< as.data.frame(airquality)
air <- as.data.frame(airquality)
apply(air, 2, function(x) sum(is.na(x)))
complete.cases(air)
is.na(air)
complete.cases(air)
complete.cases(air,1)
complete.cases(air,2)
complete.cases(air)
air[,-complete.cases(air)]
air_na <- air[,-complete.cases(air)]
air_na <- air[-complete.cases(air)]
air_na <- air[-complete.cases(air),]
air_na <- air[!complete.cases(air),]
head(air_na)
air_na <- air[complete.cases(air),]
head(air_na)
air_na <- air[!complete.cases(air),]
!F
air_na2 <- na.omit(air)
mean(c(1,2,3,NA))
library(DMwR)
install.packages("DMwR")
library(DMwR)
install.packages("installr")
library(installr)
check.for.updates.R()
install.R()
version
version
install.packages("DMwR")
library(DMwR)
install.packages("DMwR")
# data.table 패키지 활용
library(data.table)
library(dplyr)
library(reshape2)
install.packages('reshape2')
library(reshape2)
install.packages('dplyr')
install.packages(plyr)
install.packages('plyr')
install.packages("plyr")
library(dplyr)
library(plyr)
melted.df %>% filter(Month==5 & Day ==1)
install.packages("DMwR")
library(DMwR)
ari <- airquality
rm(ari)
air <- airquality
seq(0,1,0.25)
fivenum(na.omit(air$Ozone))
quantile(na.omit(air$Ozone))
summary(na.omit(air$Ozone))
boxplot(na.omit(air$Ozone))
boxplot(na.omit(air$Ozone),horizontal = T)
View(air)
View(baseball)
boxplopt(Sepal.Width~Species, iris)
boxplot(Sepal.Width~Species, iris)
boxplot(Sepal.Width~Species, iris)
OzoneBP <- boxplot(Sepal.Width~Species, iris)
OzoneBP
boxplot(na.omit(air$Ozone),horizontal = T)
boxplot(Sepal.Width~Species, iris)
Sys.Date()
as.Date('2021,5,5')
as.Date('2021-5-
5')
as.Date('2021-5-5')
Sys.time()
as.POSIXct(2)
as.POSIXct(2,origin="2021-08-01")
as.POSIXct(2,origin="2021-08-01-18")
as.POSIXct("2021-08-1-18")
as.POSIXct("2021-08-1 18")
as.POSIXct("2021-08-1 18:00")
as.POSIXct(2,origin="2021-08-01 18:00")
time <- as.POSIXlt(Sys.Date())
time
time$year
time$year + 1900
time$month
time$mon
time$mon+1
time$mday
time$wday
format(time, '%y-%m:%d')
Sys.Date+365
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
Sys.Date()+365
idx <- sample(1:nrow(iris), nrow(iris)*0.7, replace = F)
training <-iris[idx,]
test <- iris[-idx,]
install.packages("sampling")
library(sampling)
sample <- strata(data = iris, c("Species"), size = c(20,15,15), method = 'srswor')
table(sample$Species)
sample
iris_sample <- getdata(iris,sample)
iris_sample
rm(list = ls())
library(MASS)
str(cats)
df <- as.data.frame(cats)
head(df)
table(df$Sex)
shapiro.test(df$Bwt)
# 정규분포를 만족하지 않으므로 shapiro wil
mean(df$Bwt
)
wilcox.test(cats$Bwt, mu=2.6,alternative = 'two.sided')
wilcox.test(cats$Bwt, mu=2.7,alternative = 'two.sided')
before = c(7,3,4,5,2,1,6,6,5,4)
after = c(8,4,5,6,2,3,6,8,6,5)
t.test(before, after, alternative = 'less',paired=T)
t.test(before, after, alternative = 'two.sided',paired=T)
# 독립표본 T-검정 : 두 개의 독립된 모집단의 평균을 비교
# 두 모집단이 정규성 만족해야, 두 모집단이 등분산 가정을 만족해야
# 예시) 귀무가설 - 고양이들의 성별에 따른 평균 몸무게에는 통계적으로 유의한 차이가 없다.
var.test(Bwt~Sex, data=cats)
t.test(Bwt~Sex, data = cats, alternative='two.sided', var.equal = F)
# 적합성 검정 : 관측값들이 예상한 이론과 일치하는지 아닌지를 검정
# (모집단 분포에 대한 가정이 옳게 됐는지를 관측 자료와 비교하여 검정)
# 귀무가설 : 실제 분포와 이론적 분포간 차이가 없다.
data(survey, package="MASS")
str(survey)
table(survey$W.Hnd)
data<-table(survey$W.Hnd)
# 귀무가설 - 왼손잡이가 20%, 오른손잡이가 80%이다.
chisq.test(data, p=c(0.2,0.8))
# 독립성 검정 : 모집단을 범주화하는 기주의 되는 두 변수 A,B가
# 서로 독립적으로 관측값에 영향을 미치는가 여부 검정
# 귀무가설 : 두 변수 사이에는 연관이 없다.(독립이다)
table(survey$W.Hnd, survey$Exer)
# 독립성 검정 : 모집단을 범주화하는 기주의 되는 두 변수 A,B가
# 서로 독립적으로 관측값에 영향을 미치는가 여부 검정
# 귀무가설 : 두 변수 사이에는 연관이 없다.(독립이다)
using.table <- table(survey$W.Hnd, survey$Exer)
chisq.test(using.table)
data(iris)
result <- aov(Sepal.Width~ Species, data=iris)
result
summary(result)
# 사후검정 : 어떤 종들 간 평균 차이가 있는지 파악
TukeyHSD(result)
data('mtcars')
str(mtcars)
# aov함수 사용시 그룹을 구분하는 기준 변수는 반드시 팩터형
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- as.factor(mtcars$am)
car <- mtcars[,c('cyl','am','mpg')]
str(car)
car_aov <- aov(mpg~cyl*am ,car)
summary(car_aov)
interaction.plot(car$cyl, car$am, car$mpg, col = c('red','blue'))
library(MASS)
data("Cars93")
Cars93_lm <- lm(Price~EngineSize, data=Cars93)
summary(Cars93_lm)
par(mfrow=c(2,3))
plot(Cars93_lm,which=c(1:6))
set.seed(1234)
idx<-sample(1:nrow(Cars93),5)
idx
test <- Cars93[idx,]
predict.lm(Cars93_lm,test,interval="none")
test
predict.lm(Cars93_lm,test$EngineSize,interval="none")
predict.lm(Cars93_lm,test,interval=0.95)
predict.lm(Cars93_lm,test,interval="0.95")
predict.lm(Cars93_lm,test,interval="confidence")
# newdata는 data.frame 형태로 넣어야
predict.lm(Cars93_lm,test,interval="none")
predict.lm(Cars93_lm,test,interval="prediction")
library(MASS)
data("Cars93")
# 인자나 기능이 헷갈리면 help를 통해 도움 받을 수 있다.
x = Cars93$Length
y = Cars93$Weight
plot(x, y, xlab='Length',ylab='Weight', main='Cars93')
dev.new()
plot(x, y, xlab='Length',ylab='Weight', main='Cars93',xlim=c(130,230),ylim=c(1600,4400))
dev.new()
plot(x, y, xlab='Length',ylab='Weight', main='Cars93',xlim=c(130,230),ylim=c(1600,4400),pch=8)
plot(x, y, xlab='Length',ylab='Weight', main='Cars93',xlim=c(130,230),ylim=c(1600,4400),pch=8)
plot(x, y, xlab='Length',ylab='Weight', main='Cars93',xlim=c(130,230),ylim=c(1600,4400),pch='*')
plot(x, y, xlab='Length',ylab='Weight', main='Cars93',xlim=c(130,230),ylim=c(1600,4400),cex=0.5)
plot(x, y, xlab='Length',ylab='Weight', main='Cars93',xlim=c(130,230),ylim=c(1600,4400),cex=2)
plot(x, y, xlab='Length',ylab='Weight', main='Cars93',xlim=c(130,230),ylim=c(1600,4400),cex=2,col='blue')
# plot 함수 그래프의 종류(type) : p(점), l(선), b(점과 선을 모두), o(점과 선 중첩), n(그래프 초기화)
tapply(x, y, mean)
# plot 함수 그래프의 종류(type) : p(점), l(선), b(점과 선을 모두), o(점과 선 중첩), n(그래프 초기화)
temp_obj <- tapply(x, y, mean)
type(temp_obj)
class(temp_obj)
# plot 함수 그래프의 종류(type) : p(점), l(선), b(점과 선을 모두), o(점과 선 중첩), n(그래프 초기화)
temp_obj <- tapply(y, x, mean)
class(temp_obj)
temp_array
temp_obj
unique(x)
length(unique(x))
length(temp_obj)
plot(temp_obj, xlab='Length', ylab='Weigth', type='p')
plot(temp_obj, xlab='Length', ylab='Weigth', type='l')
plot(temp_obj, xlab='Length', ylab='Weigth', type='b')
plot(temp_obj, xlab='Length', ylab='Weigth', type='o')
# 선그래프(l)에 대한 종류(lty)
plot(temp_obj, xlab='Length', ylab='Weigth', type='l', lty=4)
# 서식
plot(1:10, type='n', xlab="",ylab="")
legend("bottom",c("x1","x2"),pch=1:2,title="bottom legend")
legend("bottom",c("x1","x2"),pch=1,title="bottom legend")
legend("bottom",c("x1","x2"),pch=3:4,title="bottom legend")
# 서식
plot(1:10, type='n', xlab="",ylab="")
legend("bottom",c("x1","x2"),pch=3:4,title="bottom legend")
# 서식
plot(1:10, type='n', xlab="",ylab="")
legend("bottom",c("x1","x2"),pch=1,title="bottom legend")
# pch에 벡터 형태로 넣음으로써 여러 모양 표현 가능
legend("bottom",c("x1","x2"),pch=1:2,title="bottom legend",bg='gray')
legend(7.5,4,c("x3","x4"),pch=5:6,lty=7:8,title='사용자 지정')
# 서식
plot(1:10, type='n', xlab="",ylab="")
# pch에 벡터 형태로 넣음으로써 여러 모양 표현 가능
legend("bottom",c("x1","x2"),pch=5:6,title="bottom legend",bg='gray')
legend(7.5,4,c("x3","x4"),pch=1:2,lty=7:8,title='사용자 지정')
plot(NULL, type='n',xlim=c(0,8),ylim=c(0,3),xlab='Petal.Length',ylab='Petal.Width',main='iris')
points(iris$Sepal.Length, iris$Petal.Width, cex=0.5)
points(iris$Petal.Length, iris$Petal.Width, cex=0.5)
# 선 그래프
plot(NULL, type='n',xlim=c(0,20),ylim=c(0,20),main='선 그래프')
lines(c(0,17),c(17,17),lty=1)
sep(0,12,2)
sep(0,12,2)
seq(0,12,2)
lty_vec <- c(1,2,3,'solid','dotdash','twodash','longdash')
lty_vec <- list(1,2,3,'solid','dotdash','twodash','longdash')
View(lty_vec)
lty_vec(1)
lty_vec[[1]]
lty_vec[[2]]
lty_vec[[6]]
lty_list <- list(1,2,3,'solid','dotdash','twodash','longdash')
lwd_list <- list(NULL,NULL,NULL,NULL,1,2,3,4)
for(i in c(1:7)){
lines(c(0,19-i*2),c(17,17),lty=lty_list[[i]],lwd=lwd_list[[i]])
}
# 선 그래프
plot(NULL, type='n',xlim=c(0,20),ylim=c(0,20),main='선 그래프')
for(i in c(1:7)){
lines(c(0,19-i*2),c(19-i*2,19-i*2),lty=lty_list[[i]],lwd=lwd_list[[i]])
}
?lines
data(cars)
cars_df <- as.data.frame(cars)
View(cars_df)
plot(cars_df, main = "Stopping distance versus Speed")
lowess(cars_df)
lines(lowess(cars_df))
# 직선 그래프(abline)
plot(cars_df, ylim=c(0,130),xlim=c(0,30),main='cars data')
cars_lm <- lm(dist~speed, data=cars)
abline(cars_lm,col='red')
abline(v=median(cars$speed), lty=3)
abline(h=median(cars_df$dist), lty=3)
# 곡선 그래프(curve)
?dnorm
dnorm(x,mean=0,sd=1)
dnorm(0,mean=0,sd=1)
curve(dnorm(x,mean=0,sd=1),from=-3, to=3, xlab="x", ylab="density", main="curve of dnorm")
abine(dnorm(x,mean=0,sd=1),from=-3, to=3, xlab="x", ylab="density", main="curve of dnorm")
abline(dnorm(x,mean=0,sd=1),from=-3, to=3, xlab="x", ylab="density", main="curve of dnorm")
curve(dnorm(x,mean=0,sd=1),from=-3, to=3, xlab="x", ylab="density", main="curve of dnorm")
# 막대 그래프(barplot)
table(Cars93$Origin)
# 막대 그래프(barplot)
barplot(table(Cars93$Origin),ylim=c(1,50),xlab="Origin",ylab="도수")
# 막대 그래프(barplot)
barplot(table(Cars93$Cylinders),ylim=c(1,55),xlab="Cylinders",ylab="도수")
barplot(table(Cars93$Origin, Cars93$Cylinders),beside=F,ylim=c(0,60),legend=T)
barplot(table(Cars93$Origin, Cars93$Cylinders),beside=T,ylim=c(0,60),legend=T) # 여러 범주
table(Cars93$Origin, Cars93$Cylinders)
table(Cars93$Origin)
table(Cars93$Cylinders)
# 히스토그램
hist(iris$Petal.Length)
# 히스토그램
hist(iris$Petal.Length, breaks=5)
# 히스토그램(hist) : breaks 인자 통해 구간의 개수 정하거나 임의의 구간을 벡터로 지정 가능
hist(iris$Petal.Length, breaks=5, freq=T)
# 히스토그램(hist) : breaks 인자 통해 구간의 개수 정하거나 임의의 구간을 벡터로 지정 가능
hist(iris$Petal.Length, breaks=5, freq=F)
# 히스토그램(hist) : breaks 인자 통해 구간의 개수 정하거나 임의의 구간을 벡터로 지정 가능
hist(iris$Petal.Length, breaks=5)
# 파이 차트
pie(table(Cars93$Cylinders))
# 파이 차트
pie(table(Cars93$Cylinders),labels=c("first","second","third","fourth","fifth","sixth"))
# 산점도 행렬(pairs) : 행렬,데이터프레임과 같이 데이터를 입력하는 방식 / formula를 입력하는 방식
pairs(~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=iris,
col=c("red","green","blue")[iris$Species],
pch=c('+','*','#')[iris$Species])
legend(unique(iris$Species))
legend(0.85, 0.7, as.vector(unique(iris$Species)),
fill=c("red", "green3", "blue"))
legend("bottom", as.vector(unique(iris$Species)),
fill=c("red", "green3", "blue"))
# 산점도 행렬(pairs) : 행렬,데이터프레임과 같이 데이터를 입력하는 방식 / formula를 입력하는 방식
pairs(~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=iris,
col=c("red","green","blue")[iris$Species],
pch=c('+','*','#')[iris$Species])
legend("bottom", as.vector(unique(iris$Species)))
par(xpd=TRUE)
legend("bottom", as.vector(unique(iris$Species)),fill=c("red", "green3", "blue"))
legend(0.85, 0.7, as.vector(unique(iris$Species)),fill=c("red", "green3", "blue"))
# 산점도 행렬(pairs) : 행렬,데이터프레임과 같이 데이터를 입력하는 방식 / formula를 입력하는 방식
pairs(~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=iris,
col=c("red","green","blue")[iris$Species],
pch=c('+','*','#')[iris$Species])
par(xpd=TRUE)
legend(0.85, 0.7, as.vector(unique(iris$Species)),fill=c("red", "green3", "blue"))
legend(0.85, 0.7, as.vector(unique(iris$Species)),fill=c("red", "green3", "blue"))
# 산점도 행렬(pairs) : 행렬,데이터프레임과 같이 데이터를 입력하는 방식 / formula를 입력하는 방식
pairs(~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=iris,
col=c("red","green","blue")[iris$Species],
pch=c('+','*','#')[iris$Species])
par(xpd=TRUE)
legend("top", as.vector(unique(iris$Species)),fill=c("red", "green3", "blue"))
# 산점도 행렬(pairs) : 행렬,데이터프레임과 같이 데이터를 입력하는 방식 / formula를 입력하는 방식
pairs(~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=iris,
col=c("red","green","blue")[iris$Species],
pch=c('+','*','#')[iris$Species])
par(xpd=TRUE)
legend("bottom", as.vector(unique(iris$Species)),fill=c("red", "green3", "blue"))
rm(list=ls())
# 회귀 분석
# 선형회귀분석의 가정
# 1. 독립변수와 종속변수 간의 선형성
# 2. 오차의 등분산성, 독립성, 정규성
library(MASS)
data("Cars93")
Cars93_lm <- lm(Price~EngineSize, data=Cars93)
summary(Cars93_lm)
# 다중선형회귀분석
# 검토사항 : 데이터가 전제하는 가정을 만족시키는가, 모형 내 회귀계수가 유의한가, 설명력, 통계적 유의성,
#            모형이 데이터를 잘 적합하는가, 다중공선성(VIF : 허용오차의 역수, 10이상이면 심각하다고 판단)
# 범주형 독립변수는 일반적으로 dummy variable로 변환해 처리한다.
# lm함수는 자동으로 범주형 변수를dummy variable로 변환
iris_lm <- lm(Petal.Length~Sepal.Length+Sepal.Width+Petal.Width+Species, data=iris)
summary(iris_lm)
Price_lm <- lm(Price~EngineSize+RPM+Weight,data=Cars93)
summary(Price_lm)
# backward selection(후진제거법)
lm_b <- lm(Price~EngineSize+RPM+Length,data=Cars93)
summary(lm_b)
# backward selection(후진제거법)
lm_a <- lm(Price~EngineSize+RPM+Width+Length,data=Cars93)
summary(lm_a)
summary(Price_lm)
# 유의확률이 가장 높은 변수(Width) 제거
lm_b <- lm(Price~EngineSize+RPM+Length,data=Cars93)
summary(lm_b)
# 유의확률이 가장 높은 변수(Length) 제거
lm_c <- lm(Price~EngineSize+RPM,data=Cars93)
summary(lm_c)
# 자동으로 변수 선택해주는 함수(step)
lm_result <- lm(Price~EngineSize+Horsepower+RPM+Width+Length+Weigth,data=Cars93)
# 자동으로 변수 선택해주는 함수(step)
lm_result <- lm(Price~EngineSize+Horsepower+RPM+Width+Length+Weight,data=Cars93)
step(lm_result, direction="backward",k=2) # k=2이면 AIC 사용
rm(list=ls())
# 연관분석
library(arules)
## 장바구니 분석 : 장바구니에 무엇이 '같이' 들어있는지 분석
## 서열분석 : 'A를 산 다음 B를 산다.'
"ㅇㅇㅁㄴ아시아
"
## 장바구니 분석 : 장바구니에 무엇이 '같이' 들어있는지 분석
## 서열분석 : 'A를 산 다음 B를 산다.'
"ㅇㅇㅁㄴ아시아
"
## 측도
library(arules)
## 측도
library(arules)
## 장바구니 분석 : 장바구니에 무엇이 '같이' 들어있는지 분석
## 서열분석 : 'A를 산 다음 B를 산다.'
"ㅇㅇㅁㄴ아시아
"
getcwd()
getwd()
setwd('C:\Users\hp\Desktop\최영조\코딩공부\data_analysis_exercise\통계')
setwd('C:/Users/hp/Desktop/최영조/코딩공부/data_analysis_exercise/통계')
